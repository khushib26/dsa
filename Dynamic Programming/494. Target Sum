class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int n=nums.size();
        int sum,new_target;
        sum=accumulate(nums.begin(),nums.end(),0);
        new_target=sum-target;
        if(new_target%2!=0 || target>sum)
        {
            return 0;
        }
        new_target=(sum-target)/2;
        int dp[n+1][new_target+1];
            dp[0][0]=1;
            for(int j=1;j<=new_target;j++)
            {
                dp[0][j]=0;
            }
            for(int i=0;i<=n;i++)
            {
                dp[i][0]=1;
            }
            for(int i=1;i<=n;i++)
            {
                for(int j=0;j<=new_target;j++)
                {
                    if(nums[i-1]<=j)
                    {
                        dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i-1]];
                    }
                    else
                    {
                        dp[i][j]=dp[i-1][j];
                    }
                }
            }
            return dp[n][new_target];
        
    }
};
