/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int no_count(vector<int>& v)
    {
        int count=0;
        map<int,int> mp;
        vector<int> u;
        for(int i=0;i<v.size();i++)
        {
            mp[v[i]]=i;
            u.push_back(v[i]);
        }
        sort(u.begin(),u.end());
        for(int i=0;i<v.size();i++)
        {
            if(v[i]!=u[i])
            {
                v[mp[u[i]]]=v[i];
                mp[v[i]]=mp[u[i]];
                mp[u[i]]=i;
                v[i]=u[i];
                count++;
            }
        }
        return count;
    }
    int minimumOperations(TreeNode* root) {
        vector<vector<int>> res;
        int swap=0;
        if(root==NULL)
        {
            return 0;
        }
        int count;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            count=0;
            int n=q.size();
            vector<int> v;
            vector<int> v1;
            for(int i=0;i<n;i++)
            {
                TreeNode *temp=q.front();
                q.pop();
                if(temp->left)
                {
                    q.push(temp->left);
                }
                if(temp->right)
                {
                    q.push(temp->right);
                }
                v.push_back(temp->val);
            }
           //v1=v;
            swap=swap+no_count(v);
        }
        return swap;
        
    }
};
