/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool search(TreeNode* root,int x,int y)
    {
        if(root==NULL)
        {
            return false;
        }
        if(root->val==x || root->val==y)
        {
            return false;
        }
        search(root->left,x,y);
        search(root->right,x,y);
        return true;
    }
    bool isCousins(TreeNode* root, int x, int y) {
        if(root==NULL)
        {
            return false;
        }
       /* bool a=search(root,x,y);
        if(!a)
        {
            return false;
        }*/
        queue<TreeNode*> q;
        q.push(root);
        int a1;
        int a2;
        int height=0;
        /*bool v1=false;
        bool v2=false;*/
        while(!q.empty())
        {
            
            vector<int> ans;
            int n=q.size();
            for(int i=0;i<n;i++)
            {
                bool v1=false;
               bool v2=false;
                TreeNode *temp=q.front();
                q.pop();
                if(temp->left)
                {
                    q.push(temp->left);
                    if(temp->left->val==x || temp->left->val==y)
                    {
                        v1=true;
                    }
                }
                if(temp->right)
                {
                    q.push(temp->right);
                    if(temp->right->val==y || temp->right->val==x)
                    {
                        v2=true;
                    }
                }
                if(v1==true && v2==true)
                {
                    return false;
                }
                ans.push_back(temp->val);
            }
            for(int i=0;i<ans.size();i++)
            {
                if(ans[i]==x)
                {
                    a1=height;
                }
                if(ans[i]==y)
                {
                    a2=height;
                }
            }
            height++;
        }
        if(a1!=a2)
        {
            return false;
        }
        return true;
    }
};
