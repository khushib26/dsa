class Solution {
  public:
    bool cycle(int node,vector<int> adj[],vector<bool> &visited,unordered_map<int,int> &mp)
    {
        mp[node]=-1;
        visited[node]=true;
        queue<int> q;
        q.push(node);
        while(!q.empty())
        {
            int s=q.front();
            q.pop();
            for(auto it:adj[s])
            {
                
                if(visited[it]==false)
                {
                    q.push(it);
                    visited[it]=true;
                    mp[it]=s;
                }
                else if(mp[s]!=it)
                {
                    return true;
                }
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool> visited(V+1,false);
        unordered_map<int,int> mp;
      for(int i=0;i<V;i++)
      {
          if(visited[i]==false && cycle(i,adj,visited,mp))
          {
                return true;    
          }
          
      }
      return false;
    }
};
