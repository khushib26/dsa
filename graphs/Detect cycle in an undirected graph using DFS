class Solution {
  public:
    bool dfs(int node,int parent, vector<int> adj[], vector<bool> &visited)
    {
        visited[node]=true;
        for(auto it:adj[node])
        {
            if(visited[it]==false)
            {
                bool cd=dfs(it,node,adj,visited);
                if(cd)
                {
                    return true;
                }
            }
            else if(it != parent)
            {
                return true;
            }
            
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool> visited(V+1,false);
        for(int i=0;i<V;i++)
        {
            if(visited[i]==false && dfs(i,-1,adj,visited))
            {
                return true;
            }
        }
        return false;
    }
};
