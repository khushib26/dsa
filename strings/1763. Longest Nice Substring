class Solution {
public :
    bool static cmp(string s1,string s2)
    {
        return s1.size()>s2.size();
    }
    bool fn(string s2)
    {
        unordered_map<char,int> mp;
        for(int i=0;i<s2.size();i++)
        {
            mp[s2[i]]=i;
        }
        for(int j=0;j<s2.size();j++)
        {
            if(islower(s2[j]))
            {
                if(mp.find(toupper(s2[j]))==mp.end())
                {
                    return false;
                }
            }
            else
            {
                 if(mp.find(tolower(s2[j]))==mp.end())
                {
                    return false;
                }
            }
        }
        return true;
    }
    string longestNiceSubstring(string s) {
        int n=s.size();
        vector<string> v;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                string s1=s.substr(i,j-i+1);
                v.push_back(s1);
            }
        }
        //sort(v.begin(),v.end(),cmp);
        for(int i=0;i<v.size();i++)
        {
            cout<<v[i]<<endl;
        }
        int len=INT_MIN;
        string sn="";
        for(int i=0;i<v.size();i++)
        {
            if(fn(v[i]))
            {
                int l=v[i].size();
                if(l>len)
                {
                    len=l;
                    sn=v[i];
                }
            }
        }
        return sn;
    }
};
