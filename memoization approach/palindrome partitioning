class Solution {
public:
    int dp[2002][2002];
    bool check_palindrome(string &s,int i,int j)
    {
        while(i<=j)
        {
            if(s[i]!=s[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
    int cut(string &s,int i,int j)
    {
        int mn=INT_MAX;
        int temp_ans;
        if(i>=j)
        {
              return 0;
        }
         if(check_palindrome(s,i,j))
         {
              return 0;
         }
         if(dp[i][j]!=-1)
         {
             return dp[i][j];
         }
         for(int k=i;k<j;k++)
        {
            if(check_palindrome(s,i,k))
            {
                if(dp[k+1][j]!=-1)
                {
                    temp_ans=dp[k+1][j]+1;
                }
                else
                {
                    dp[k+1][j]=cut(s,k+1,j);
                    temp_ans=1+dp[k+1][j];
                }
                mn=min(mn,temp_ans);
            }
            
            
        }
        return dp[i][j]=mn;
    }
    int minCut(string s) {
        int n=s.size()-1;
        memset(dp,-1,sizeof(dp));
        return cut(s,0,n);
    }
};
